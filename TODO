TODO: Implement all of Lotus's syntax for the parser (we don't care about the interpreter obviously)
Changes from lotus syntax (for now) :
     - Comments are '//' and '/*' because they can be nested way easily, they are more familiar, and it's just less work for me
     - Interpolated strings use $"..." and not `...`

TODO: Write actual exceptions instead on throwing just new Exception()s (about 18 classic Exceptions in total, of which 13 are empty)

TODO: Iron out the details, for example, in the Parselets' Parse(...) methods, we need to choose if we prefer to name the token
parameter directly and then do some checks on it, even though that could sometimes mean that we would need to convert multiple times
for multiple reasons. Or, we could choose to take a more generic name for the token passed as parameter at first, and then we do
usual checks like `is ComplexToken <token_name>` where we replace <token_name> by the actual name of the token.

TODO:
     - class/interface/extends
     - ternary/conditional operator (condition ? a : b)
     - type for func declaration (return type and param type)

TODO: re-write some parsing code (e.g. foreach.parse) to have a consistent style (e.g. consume nodes instead of tokens and
then check if they are valid)

TODO: Should we do some check like IsName() at the semantic analysis phase or at parsing ? It might be better to do all the checking
at analysis-time, because right now some nodes are valid while others not. Maybe a compromise, like, if it's absolutely possible to
check at parse-time, do it, but if it's not sure, wait for semantic analysis.
However, doing the checks at analysis-time might make it possible to produce multiple errors at a time and to make sense of the rest
of the program. This is a *huge* upside.

TODO: Replace *Exceptions with error codes, without throwing (probably would require semantic analysis)

TODO: Implement typed parameters in function declarations (maybe have types in square brackets ? like print([string] s) {...} ?
or maybe have them after the parameter's name like print(s : string) or print(s is/as string)

TODO: Write documentation for the Grammar class

TODO: Just write docs in general

TODO: Should parselets/toklets throw InternalErrorException when they are not called on a valid input, i.e. the first token/char
is not valid for this parselet/toklet
- No because InvalidInput is better for that, and if we start to use InternalError everywhere it will loose its meaning and gravity

TODO: IMPORTANT Write coding guidelines

TODO: Make a color chart for node

TODO: Do we preserve every token we can, even if they are obvious, or do we just ignore them ?

TODO: Find a way to flatten else-if chains (example in git stash) AND "clean" them, i.e. remove the pointers to the other ElseNodes
that have been flattened