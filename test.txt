/*
 *
 * This is a test file for the parser.
 * It is meant to test each feature, even tho it doesn't
 * make any sense most of the times.
 * This should never throw once committed.
 *
 */

arr = [ 36, 845, 215, "he", true, [ .5465, 486513], aur, /* wtf */ new String() ]

arr.add([], arr)

print $"hello {"benjamin"} ! Today will be {GetWeather(pressure * 10.644^(temperature-2048))}"

n   =  5
    *  ("hello " + "world")
    ^^ (1 / 3 != 3 / 1)
    && (6 * 9 == 9 * 6)
    || !(-6 * -1 == 6)
    *  (89 < 8 * 9)
    +  (45 >= 44)
    %  (48946 == 498431 - 46413 ? 2^7 : 2^6)
    && !true



var a = 0

var b = arr != [] ? arr : [ 0 ]

// NOTE: Function that have parameters with the `type [a, b]` syntax will not be printed
// exactly as they appear in the file. Instead, their parameters will be printed as `type a,type  b`
// I think this is fine for now, since the fix would be non-trivial and it wouldn't change much
func someFunc1(a, string [b, c], int d): int {
    print(a.toString() + b + c);
}

func someFunc2(int [seed, min = 0, max]) {
    return new Random(seed).next(min, max)
}

func someFunc() {
    print("called!")

    return
}

from origin import someType

using std.collections

//TODO:namespace my_space

foreach (item in collection) { }

foreach (otherItem in otherCollection) {
    if (collection.contains(otherItem)) break;

    otherItem.markAsBad()
}

for (var i = 0, i < 10, i++) {
    print(i)
}

for (var j = i, i > 10, --i) { }

if (condition)
    print("it's true")

if (a || b && c != d + e)
    print("tf")
else if (this.otherCondition()) {
    print("maybe ?")
} else { } // fuck it

while (str.length < 20) {
    if (str[-1] == "z") continue;

    str.concat(alphabet[rnd.next(26)], rnd.next(26))
}

do
    print("still looping")
while (_global++ < 13)

/* some /* nested */ comments */

// some one-line comment